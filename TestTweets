private int latestBanIDFetched = -1;
        private Dictionary<string, ADKAT_Ban> ADKAT_BanList = new Dictionary<string, ADKAT_Ban>();
        private Boolean fetchBans()
        {
            DebugWrite("canPunish starting!", 6);

            try
            {
                using (MySqlConnection databaseConnection = this.getDatabaseConnection())
                {
                    using (MySqlCommand command = databaseConnection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                                `ban_id`, 
	                        `admin_name`, 
	                        `player_name`, 
	                        `player_ip`, 
	                        `player_guid`, 
	                        `ban_reason`, 
	                        `ban_durationMinutes`, 
	                        `ban_status`, 
	                        `ban_sync`, 
	                        `ban_time`, 
                        FROM
	                        `adkat_banlist` ";
                        //WHERE 
	                    //    `ban_sync` NOT LIKE '/" + this.server_id + "/'";

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            //Success fetching bans
                            Boolean success = false;
                            //Loop through all incoming bans
                            while (reader.Read())
                            {
                                success = true;

                                ADKAT_Ban ban = new ADKAT_Ban();
                                ban.ban_id = reader.GetInt32("ban_id");
                                ban.admin_name = reader.GetString("admin_name");
                                ban.player_name = reader.GetString("player_name");
                                ban.player_ip = reader.GetString("player_ip");
                                ban.player_guid = reader.GetString("player_guid");
                                ban.ban_reason = reader.GetString("ban_reason");
                                ban.ban_durationMinutes = reader.GetInt32("ban_durationMinutes");
                                ban.ban_status = reader.GetInt32("ban_status");
                                ban.ban_sync = reader.GetString("ban_sync");
                                ban.ban_time = reader.GetDateTime("ban_time");

                            }

                            if (success)
                            {

                                //Clear the ban list
                                this.ADKAT_BanList.Clear();
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                DebugWrite(e.ToString(), 3);
            }
            DebugWrite("ERROR in fetchBans!", 6);
            return false;
        }
//Change all these to elseifs
if (!this.confirmTable("adkat_banlist"))
{
        ConsoleError("Access Table not present in the database.");
        this.runDBSetupScript();
        if (!this.confirmTable("adkat_accesslist"))
        {
                this.ConsoleError("After running setup script access table still not present.");
                confirmed = false;
        }
}


public bool DefaultTweet(String status)
        {
            return Tweet
                (
                status,
                default_twitter_access_token,
                default_twitter_access_token_secret,
                default_twitter_consumer_key,
                default_twitter_consumer_secret,
                true
                );
        }

        public bool Tweet(String status)
        {
            /* Verify that we have all the required fields */
            String access_token = getStringVarValue("twitter_access_token");
            String access_token_seceret = getStringVarValue("twitter_access_token_secret");
            String consumer_key = getStringVarValue("twitter_consumer_key");
            String consumer_secret = getStringVarValue("twitter_consumer_secret");

            return Tweet(status, access_token, access_token_seceret, consumer_key, consumer_secret, false);
        }


        public bool Tweet
            (
            String status,
            String access_token,
            String access_token_secret,
            String consumer_key,
            String consumer_secret,
            bool quiet
            )
        {
            try
            {
                if (VMode)
                {
                    ConsoleWarn("not tweeting, ^bvirtual_mode^n is ^bon^n");
                    return false;
                }

                if (String.IsNullOrEmpty(status))
                    throw new TwitterException("Cannot update Twitter status, invalid ^bstatus^n value");


                if (String.IsNullOrEmpty(access_token) || String.IsNullOrEmpty(access_token_secret) ||
                    String.IsNullOrEmpty(consumer_key) || String.IsNullOrEmpty(consumer_secret))
                    throw new TwitterException("Cannot update Twitter status, looks like you have not run Twitter setup");

                /* Create the Status Update Request */
                OAuthRequest orequest = TwitterStatusUpdateRequest(status, access_token, access_token_secret, consumer_key, consumer_secret);

                HttpWebResponse oresponse = (HttpWebResponse)orequest.request.GetResponse();

                String protcol = "HTTP/" + oresponse.ProtocolVersion + " " + (int)oresponse.StatusCode;

                if (!oresponse.StatusCode.Equals(HttpStatusCode.OK))
                    throw new TwitterException("Twitter UpdateStatus Request failed, " + protcol);

                if (oresponse.ContentLength == 0)
                    throw new TwitterException("Twitter UpdateStatus Request failed, ContentLength=0");

                StreamReader sin = new StreamReader(oresponse.GetResponseStream());
                String response = sin.ReadToEnd();
                sin.Close();

                Hashtable data = (Hashtable)JSON.JsonDecode(response);

                if (data == null || !data.ContainsKey("id_str"))
                    throw new TwitterException("Twitter UpdateStatus Request failed, response missing ^bid^n field");

                String id = (String)(data["id_str"].ToString());

                DebugWrite("Tweet Successful, id=^b" + id + "^n, Status: " + status, 4);

                return true;
            }
            catch (TwitterException e)
            {
                if (!quiet)
                    ConsoleException(e.Message);
            }
            catch (WebException e)
            {
                if (!quiet)
                    HandleTwitterWebException(e, "UpdateStatus");
            }
            catch (Exception e)
            {
                DumpException(e);
            }

            return false;

        }

        public void VerifyTwitterPin(String PIN)
        {
            try
            {
                if (String.IsNullOrEmpty(PIN))
                {
                    ConsoleError("Cannot verify Twitter PIN, value(^b" + PIN + "^n) is invalid");
                    return;
                }

                DebugWrite("VERIFIER_PIN: " + PIN, 5);

                hidden_variables["twitter_verifier_pin"] = true;

                if (String.IsNullOrEmpty(oauth_token) || String.IsNullOrEmpty(oauth_token_secret))
                    throw new TwitterException("Cannot verify Twitter PIN, There is no ^boauth_token^n or ^boauth_token_secret^n in memory");



                OAuthRequest orequest = TwitterAccessTokenRequest(PIN, oauth_token, oauth_token_secret);

                HttpWebResponse oresponse = (HttpWebResponse)orequest.request.GetResponse();

                String protcol = "HTTP/" + oresponse.ProtocolVersion + " " + (int)oresponse.StatusCode;

                if (!oresponse.StatusCode.Equals(HttpStatusCode.OK))
                    throw new TwitterException("Twitter AccessToken Request failed, " + protcol);

                if (oresponse.ContentLength == 0)
                    throw new TwitterException("Twitter AccessToken Request failed, ContentLength=0");

                StreamReader sin = new StreamReader(oresponse.GetResponseStream());
                String response = sin.ReadToEnd();

                DebugWrite("ACCESS_TOKEN_RESPONSE: " + response, 5);


                Dictionary<String, String> pairs = ParseQueryString(response);


                /* Sanity check the results */
                if (pairs.Count == 0)
                    throw new TwitterException("Twitter AccessToken Request failed, missing fields");

                /* Get the ReuestToken */
                if (!pairs.ContainsKey("oauth_token"))
                    throw new TwitterException("Twitter AccessToken Request failed, missing ^boauth_token^n field");
                oauth_token = pairs["oauth_token"];

                /* Get the RequestTokenSecret */
                if (!pairs.ContainsKey("oauth_token_secret"))
                    throw new TwitterException("Twitter AccessToken Request failed, missing ^boauth_token_secret^n field");
                oauth_token_secret = pairs["oauth_token_secret"];

                /* Get the User-Id  (Optional) */
                String user_id = String.Empty;
                if (pairs.ContainsKey("user_id"))
                    user_id = pairs["user_id"];

                /* Get the Screen-Name (Optional) */
                String screen_name = String.Empty;
                if (pairs.ContainsKey("screen_name"))
                    screen_name = pairs["screen_name"];


                ConsoleWrite("Access token, and secret obtained. Twitter setup is now complete.");
                if (!String.IsNullOrEmpty(user_id))
                    ConsoleWrite("Twitter User-Id: ^b" + user_id + "^n");
                if (!String.IsNullOrEmpty(screen_name))
                    ConsoleWrite("Twitter Screen-Name: ^b" + screen_name + "^n");

                DebugWrite("access_token=" + oauth_token, 4);
                DebugWrite("access_token_secret=" + oauth_token_secret, 4);


                setStringVarValue("twitter_access_token", oauth_token);
                setStringVarValue("twitter_access_token_secret", oauth_token_secret);
                setStringVarValue("twitter_user_id", user_id);
                setStringVarValue("twitter_screen_name", screen_name);

            }
            catch (TwitterException e)
            {
                ConsoleException(e.Message);
                ConsoleWarn("Set the field ^btwitter_setup_account^n to ^bTrue^n to re-initiate the Twitter configuration");
                return;
            }
            catch (WebException e)
            {
                HandleTwitterWebException(e, "AccessToken");
            }
            catch (Exception e)
            {
                DumpException(e);
            }


        }


        public void SetupTwitter()
        {
            try
            {
                //Display the Twitter Pin Field
                hidden_variables["twitter_verifier_pin"] = false;
                oauth_token = String.Empty;
                oauth_token_secret = String.Empty;


                OAuthRequest orequest = TwitterRequestTokenRequest();

                HttpWebResponse oresponse = (HttpWebResponse)orequest.request.GetResponse();
                String protcol = "HTTP/" + oresponse.ProtocolVersion + " " + (int)oresponse.StatusCode;

                if (!oresponse.StatusCode.Equals(HttpStatusCode.OK))
                    throw new TwitterException("Twitter RequestToken Request failed, " + protcol);

                if (oresponse.ContentLength == 0)
                    throw new TwitterException("Twitter RequestToken Request failed, ContentLength=0");

                StreamReader sin = new StreamReader(oresponse.GetResponseStream());
                String response = sin.ReadToEnd();

                Dictionary<String, String> pairs = ParseQueryString(response);

                if (pairs.Count == 0 || !pairs.ContainsKey("oauth_callback_confirmed"))
                    throw new TwitterException("Twitter RequestToken Request failed, missing ^boauth_callback_confirmed^n field");

                String oauth_callback_confirmed = pairs["oauth_callback_confirmed"];

                if (!oauth_callback_confirmed.ToLower().Equals("true"))
                    throw new TwitterException("Twitter RequestToken Request failed, ^boauth_callback_confirmed^n=^b" + oauth_callback_confirmed + "^n");

                /* Get the ReuestToken */
                if (!pairs.ContainsKey("oauth_token"))
                    throw new TwitterException("Twitter RequestToken Request failed, missing ^boauth_token^n field");
                oauth_token = pairs["oauth_token"];

                /* Get the RequestTokenSecret */
                if (!pairs.ContainsKey("oauth_token_secret"))
                    throw new TwitterException("Twitter RequestToken Request failed, missing ^boauth_token_secret^n field");
                oauth_token_secret = pairs["oauth_token_secret"];



                DebugWrite("REQUEST_TOKEN_RESPONSE: " + response, 5);
                DebugWrite("oauth_callback_confirmed=" + oauth_callback_confirmed, 4);
                DebugWrite("oauth_token=" + oauth_token, 4);
                DebugWrite("oauth_token_secret=" + oauth_token_secret, 4);

                ConsoleWrite("Please visit the following site to obtain the ^btwitter_verifier_pin^n");
                ConsoleWrite("http://api.twitter.com/oauth/authorize?oauth_token=" + oauth_token);


            }
            catch (TwitterException e)
            {
                ConsoleException(e.Message);
                return;
            }
            catch (WebException e)
            {
                HandleTwitterWebException(e, "RequestToken");
            }
            catch (Exception e)
            {
                DumpException(e);
            }

        }

        public void HandleTwitterWebException(WebException e, String prefix)
        {
            HttpWebResponse response = (HttpWebResponse)e.Response;
            String protcol = (response == null) ? "" : "HTTP/" + response.ProtocolVersion;

            String error = String.Empty;
            //try reading JSON response
            if (response != null && response.ContentType != null && response.ContentType.ToLower().Contains("json"))
            {
                try
                {
                    StreamReader sin = new StreamReader(response.GetResponseStream());
                    String data = sin.ReadToEnd();
                    sin.Close();

                    Hashtable jdata = (Hashtable)JSON.JsonDecode(data);
                    if (jdata == null || !jdata.ContainsKey("error") ||
                        jdata["error"] == null || !jdata["error"].GetType().Equals(typeof(String)))
                        throw new Exception();

                    error = "Twitter Error: " + (String)jdata["error"] + ", ";
                }
                catch (Exception ex)
                {
                }
            }

            /* Handle Time-Out Gracefully */
            if (e.Status.Equals(WebExceptionStatus.Timeout))
            {
                ConsoleException("Twitter " + prefix + " Request(" + protcol + ") timed-out");
                return;
            }
            else if (e.Status.Equals(WebExceptionStatus.ProtocolError))
            {
                ConsoleException("Twitter " + prefix + " Request(" + protcol + ") failed, " + error + " " + e.GetType() + ": " + e.Message);
                return;
            }
            else
                throw e;
        }

        public Dictionary<String, String> ParseQueryString(String text)
        {

            MatchCollection matches = Regex.Matches(text, @"([^=]+)=([^&]+)&?", RegexOptions.IgnoreCase);

            Dictionary<String, String> pairs = new Dictionary<string, string>();

            foreach (Match match in matches)
                if (match.Success && !pairs.ContainsKey(match.Groups[1].Value))
                    pairs.Add(match.Groups[1].Value, match.Groups[2].Value);

            return pairs;
        }


        public static int MAX_STATUS_LENGTH = 140;
        public OAuthRequest TwitterStatusUpdateRequest(
            String status,
            String access_token,
            String access_token_secret,
            String consumer_key,
            String consumer_secret)
        {
            System.Net.ServicePointManager.Expect100Continue = false;

            if (String.IsNullOrEmpty(status))
                return null;


            String suffix = "...";
            if (status.Length > MAX_STATUS_LENGTH)
                status = status.Substring(0, MAX_STATUS_LENGTH - suffix.Length) + suffix;


            OAuthRequest orequest = new OAuthRequest(this, "http://api.twitter.com/1/statuses/update.json");
            orequest.Method = HTTPMethod.POST;
            orequest.request.ContentType = "application/x-www-form-urlencoded";

            /* Set the Post Data */

            byte[] data = Encoding.UTF8.GetBytes("status=" + OAuthRequest.UrlEncode(Encoding.UTF8.GetBytes(status)));

            // Parameters required by the Twitter OAuth Protocol
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_consumer_key", consumer_key));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_nonce", Guid.NewGuid().ToString("N")));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_signature_method", "HMAC-SHA1"));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_token", access_token));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_timestamp", ((long)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds).ToString()));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_version", "1.0"));
            orequest.parameters.Add(new KeyValuePair<string, string>("status", OAuthRequest.UrlEncode(Encoding.UTF8.GetBytes(status))));

            // Compute and add the signature
            String signature = orequest.Signature(consumer_secret, access_token_secret);
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_signature", OAuthRequest.UrlEncode(signature)));

            // Add the OAuth authentication header
            String OAuthHeader = orequest.Header();
            orequest.request.AuthenticationLevel = System.Net.Security.AuthenticationLevel.MutualAuthRequired;
            orequest.request.Headers["Authorization"] = OAuthHeader;

            // Add the POST body
            orequest.request.ContentLength = data.Length;
            Stream sout = orequest.request.GetRequestStream();
            sout.Write(data, 0, data.Length);
            sout.Close();

            return orequest;
        }


        public OAuthRequest TwitterAccessTokenRequest(String verifier, String token, String secret)
        {
            OAuthRequest orequest = new OAuthRequest(this, "http://api.twitter.com/oauth/access_token");
            orequest.Method = HTTPMethod.POST;
            orequest.request.ContentLength = 0;

            // Parameters required by the Twitter OAuth Protocol
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_consumer_key", getStringVarValue("twitter_consumer_key")));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_nonce", Guid.NewGuid().ToString("N")));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_timestamp", ((long)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds).ToString()));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_signature_method", "HMAC-SHA1"));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_version", "1.0"));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_token", token));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_verifier", verifier));

            // Compute and add the signature
            String signature = orequest.Signature(getStringVarValue("twitter_consumer_secret"), secret);
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_signature", OAuthRequest.UrlEncode(signature)));

            // Add the OAuth authentication header
            String OAuthHeader = orequest.Header();
            orequest.request.AuthenticationLevel = System.Net.Security.AuthenticationLevel.MutualAuthRequired;
            orequest.request.Headers["Authorization"] = OAuthHeader;



            return orequest;
        }

        public OAuthRequest TwitterRequestTokenRequest()
        {
            OAuthRequest orequest = new OAuthRequest(this, "http://api.twitter.com/oauth/request_token");
            orequest.Method = HTTPMethod.POST;
            orequest.request.ContentLength = 0;

            // Parameters required by the Twitter OAuth Protocol
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_callback", OAuthRequest.UrlEncode("oob")));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_consumer_key", getStringVarValue("twitter_consumer_key")));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_nonce", Guid.NewGuid().ToString("N")));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_timestamp", ((long)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds).ToString()));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_signature_method", "HMAC-SHA1"));
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_version", "1.0"));

            // Compute and add the signature
            String signature = orequest.Signature(getStringVarValue("twitter_consumer_secret"), null);
            orequest.parameters.Add(new KeyValuePair<string, string>("oauth_signature", OAuthRequest.UrlEncode(signature)));

            // Add the OAuth authentication header
            String OAuthHeader = orequest.Header();
            orequest.request.AuthenticationLevel = System.Net.Security.AuthenticationLevel.MutualAuthRequired;
            orequest.request.Headers["Authorization"] = OAuthHeader;

            return orequest;
        }
