

                //render the remaining time
                //Use custom code on refresh, but not on initial load, would take too much time
                var ban_remainingTime = "Parsing Error";
                if(updating)
                {
                    ban_remainingTime = getTimeDifferenceString(new Date(), this.model.get("ban_endTime"));
                }
                else
                {
                    ban_remainingTime = this.model.get("ban_remainingTime");
                    if(ban_remainingTime == null)
                    {
                        ban_remainingTime = "Invalid Remaining Time";
                    }
                }
                this.options.remaining_time_element = $('<td>' + ban_remainingTime + '</td>');
                $(this.el).append(this.options.remaining_time_element);
                
                
    //Get time difference string between js Date objects
    function getTimeDifferenceString(startDate, endDate){
        seconds = Math.floor((date_future - (date_now))/1000);
        //Check for expired case
        if(seconds < 0)
        {
            return "Expired";
        }
        minutes = Math.floor(seconds/60);
        hours = Math.floor(minutes/60);
        days = Math.floor(hours/24);
        //Check for permanent case
        if(days > 365)
        {
            return "Permanent";
        }
        //Get components
        hours = hours-(days*24);
        minutes = minutes-(days*24*60)-(hours*60);
        seconds = seconds-(days*24*60*60)-(hours*60*60)-(minutes*60);
        return days + "d" + hours + "h" + minutes + "m" + seconds + "s";
    }
    


    /**
     * Gets up to 1000 search results for a player name
     * @param String player_nme - substring of the player name to search for
     */
    public function playerSearch($player_name = null)
    {
        // Do a check and make sure a valid name was provided
        if(is_null($player_name) || empty($player_name)) return outputStatus('error', 'Invalid player name');

        // Search for players
        $query = $this->db->select('*')->from('tbl_playerdata')->where('SoldierName', $player_name)->limit(1001)->get();

        if($query->num_rows() > 0)
        {
            if($query->num_rows() <= 1000)
            {
                foreach($query->result_array() as $row)
                {
                    $data['data'][] = array(
                        'player_id'   => $row['player_id'],
                        'player_name'   => $row['SoldierName'];
                        'player_guid'   => $row['EAGUID'];
                        'player_pbguid'   => $row['PBGUID'];
                        'player_ip'   => $row['IP_Address'];
                    );
                }

                //$data['elapsed_time'] = $this->benchmark->elapsed_time('chat_pull', 'chat_pull_end');
                //$this->benchmark->mark('chat_pull_end');
                //return formatted content
                return $data;
            }
            else
            {
                return outputStatus('error', 'Too many results found. Refine search!');
            }
        }
        else
        {
            return outputStatus('error', 'Could not find specified player!');
        }
    }
